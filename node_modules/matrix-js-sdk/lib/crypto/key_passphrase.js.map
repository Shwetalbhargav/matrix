{"version":3,"file":"key_passphrase.js","names":["randomString","DEFAULT_ITERATIONS","DEFAULT_BITSIZE","keyFromAuthData","authData","password","private_key_salt","private_key_iterations","Error","deriveKey","private_key_bits","keyFromPassphrase","_x","_keyFromPassphrase","apply","arguments","_asyncToGenerator","salt","key","iterations","_x2","_x3","_x4","_deriveKey","numBits","length","undefined","globalThis","crypto","subtle","TextEncoder","importKey","encode","name","keybits","deriveBits","hash","Uint8Array"],"sources":["../../src/crypto/key_passphrase.ts"],"sourcesContent":["/*\nCopyright 2018 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { randomString } from \"../randomstring.ts\";\n\nconst DEFAULT_ITERATIONS = 500000;\n\nconst DEFAULT_BITSIZE = 256;\n\n/* eslint-disable camelcase */\ninterface IAuthData {\n    private_key_salt?: string;\n    private_key_iterations?: number;\n    private_key_bits?: number;\n}\n/* eslint-enable camelcase */\n\ninterface IKey {\n    key: Uint8Array;\n    salt: string;\n    iterations: number;\n}\n\nexport function keyFromAuthData(authData: IAuthData, password: string): Promise<Uint8Array> {\n    if (!authData.private_key_salt || !authData.private_key_iterations) {\n        throw new Error(\"Salt and/or iterations not found: \" + \"this backup cannot be restored with a passphrase\");\n    }\n\n    return deriveKey(\n        password,\n        authData.private_key_salt,\n        authData.private_key_iterations,\n        authData.private_key_bits || DEFAULT_BITSIZE,\n    );\n}\n\nexport async function keyFromPassphrase(password: string): Promise<IKey> {\n    const salt = randomString(32);\n\n    const key = await deriveKey(password, salt, DEFAULT_ITERATIONS, DEFAULT_BITSIZE);\n\n    return { key, salt, iterations: DEFAULT_ITERATIONS };\n}\n\nexport async function deriveKey(\n    password: string,\n    salt: string,\n    iterations: number,\n    numBits = DEFAULT_BITSIZE,\n): Promise<Uint8Array> {\n    if (!globalThis.crypto.subtle || !TextEncoder) {\n        throw new Error(\"Password-based backup is not available on this platform\");\n    }\n\n    const key = await globalThis.crypto.subtle.importKey(\n        \"raw\",\n        new TextEncoder().encode(password),\n        { name: \"PBKDF2\" },\n        false,\n        [\"deriveBits\"],\n    );\n\n    const keybits = await globalThis.crypto.subtle.deriveBits(\n        {\n            name: \"PBKDF2\",\n            salt: new TextEncoder().encode(salt),\n            iterations: iterations,\n            hash: \"SHA-512\",\n        },\n        key,\n        numBits,\n    );\n\n    return new Uint8Array(keybits);\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,YAAY,QAAQ,oBAAoB;AAEjD,IAAMC,kBAAkB,GAAG,MAAM;AAEjC,IAAMC,eAAe,GAAG,GAAG;;AAE3B;;AAMA;;AAQA,OAAO,SAASC,eAAeA,CAACC,QAAmB,EAAEC,QAAgB,EAAuB;EACxF,IAAI,CAACD,QAAQ,CAACE,gBAAgB,IAAI,CAACF,QAAQ,CAACG,sBAAsB,EAAE;IAChE,MAAM,IAAIC,KAAK,CAAC,oCAAoC,GAAG,kDAAkD,CAAC;EAC9G;EAEA,OAAOC,SAAS,CACZJ,QAAQ,EACRD,QAAQ,CAACE,gBAAgB,EACzBF,QAAQ,CAACG,sBAAsB,EAC/BH,QAAQ,CAACM,gBAAgB,IAAIR,eACjC,CAAC;AACL;AAEA,gBAAsBS,iBAAiBA,CAAAC,EAAA;EAAA,OAAAC,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAMtC,SAAAF,mBAAA;EAAAA,kBAAA,GAAAG,iBAAA,CANM,WAAiCX,QAAgB,EAAiB;IACrE,IAAMY,IAAI,GAAGjB,YAAY,CAAC,EAAE,CAAC;IAE7B,IAAMkB,GAAG,SAAST,SAAS,CAACJ,QAAQ,EAAEY,IAAI,EAAEhB,kBAAkB,EAAEC,eAAe,CAAC;IAEhF,OAAO;MAAEgB,GAAG;MAAED,IAAI;MAAEE,UAAU,EAAElB;IAAmB,CAAC;EACxD,CAAC;EAAA,OAAAY,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,gBAAsBN,SAASA,CAAAW,GAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,UAAA,CAAAT,KAAA,OAAAC,SAAA;AAAA;AA8B9B,SAAAQ,WAAA;EAAAA,UAAA,GAAAP,iBAAA,CA9BM,WACHX,QAAgB,EAChBY,IAAY,EACZE,UAAkB,EAEC;IAAA,IADnBK,OAAO,GAAAT,SAAA,CAAAU,MAAA,QAAAV,SAAA,QAAAW,SAAA,GAAAX,SAAA,MAAGb,eAAe;IAEzB,IAAI,CAACyB,UAAU,CAACC,MAAM,CAACC,MAAM,IAAI,CAACC,WAAW,EAAE;MAC3C,MAAM,IAAItB,KAAK,CAAC,yDAAyD,CAAC;IAC9E;IAEA,IAAMU,GAAG,SAASS,UAAU,CAACC,MAAM,CAACC,MAAM,CAACE,SAAS,CAChD,KAAK,EACL,IAAID,WAAW,CAAC,CAAC,CAACE,MAAM,CAAC3B,QAAQ,CAAC,EAClC;MAAE4B,IAAI,EAAE;IAAS,CAAC,EAClB,KAAK,EACL,CAAC,YAAY,CACjB,CAAC;IAED,IAAMC,OAAO,SAASP,UAAU,CAACC,MAAM,CAACC,MAAM,CAACM,UAAU,CACrD;MACIF,IAAI,EAAE,QAAQ;MACdhB,IAAI,EAAE,IAAIa,WAAW,CAAC,CAAC,CAACE,MAAM,CAACf,IAAI,CAAC;MACpCE,UAAU,EAAEA,UAAU;MACtBiB,IAAI,EAAE;IACV,CAAC,EACDlB,GAAG,EACHM,OACJ,CAAC;IAED,OAAO,IAAIa,UAAU,CAACH,OAAO,CAAC;EAClC,CAAC;EAAA,OAAAX,UAAA,CAAAT,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]}