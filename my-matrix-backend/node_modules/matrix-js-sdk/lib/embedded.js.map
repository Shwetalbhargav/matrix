{"version":3,"file":"embedded.js","names":["WidgetApiToWidgetAction","MatrixCapabilities","MatrixEvent","EventStatus","EventType","logger","MatrixClient","ClientEvent","UNSTABLE_MSC4140_DELAYED_EVENTS","SyncApi","SyncState","SlidingSyncSdk","User","MapWithDefault","recursiveMapToObject","RoomWidgetClient","constructor","widgetApi","capabilities","roomId","opts","sendContentLoaded","_this","_capabilities$sendEve","_capabilities$receive","_capabilities$sendSta","_capabilities$receive2","_capabilities$sendEve2","_capabilities$receive3","_capabilities$sendSta2","_capabilities$receive4","_capabilities$sendToD","_capabilities$receive5","_capabilities$sendEve3","_capabilities$sendSta3","this","_defineProperty","_ref","_asyncToGenerator","ev","preventDefault","detail","data","room_id","event","syncApi","injectRoomEvents","room","emit","Event","setSyncState","Syncing","info","concat","getId","getType","getStateKey","event_id","eventId","ack","_x","apply","arguments","_ref2","type","sender","content","encrypted","makeEncrypted","RoomMessageEncrypted","ToDeviceEvent","_x2","widgetApiReady","Promise","resolve","once","sendEvent","length","receiveEvent","sendMessage","Array","isArray","receiveMessage","sendState","receiveState","requestCapabilityForRoomTimeline","forEach","eventType","requestCapabilityToSendEvent","requestCapabilityToReceiveEvent","requestCapabilityToSendMessage","msgType","requestCapabilityToReceiveMessage","_ref3","stateKey","requestCapabilityToSendState","_ref4","requestCapabilityToReceiveState","sendToDevice","requestCapabilityToSendToDevice","receiveToDevice","requestCapabilityToReceiveToDevice","sendDelayedEvents","requestCapability","MSC4157SendDelayedEvent","updateDelayedEvents","MSC4157UpdateDelayedEvent","turnServers","MSC3846TurnServers","on","SendEvent","onEvent","SendToDevice","onToDevice","start","startClient","_arguments","_this2","_this2$capabilities$r","_this2$capabilities$r2","undefined","lifecycle","AbortController","userId","getUserId","store","storeUser","slidingSync","buildSyncApiOptions","createRoom","storeRoom","all","map","_ref6","_ref5","rawEvents","readStateEvents","events","rawEvent","_x3","clientWellKnownPollPeriod","clientWellKnownIntervalID","setInterval","fetchClientWellKnown","matrixRTC","watchTurnServers","stopClient","off","abort","joinRoom","roomIdOrAlias","_this3","Error","encryptAndSendEvent","delayOpts","_this4","response","sendRoomEvent","getContent","delay","parent_delay_id","validateSendDelayedEventResponse","e","updatePendingEventStatus","NOT_SENT","updatePendingEvent","SENT","sendStateEvent","_arguments2","_this5","_unstable_sendDelayedStateEvent","_arguments3","_this6","doesServerSupportUnstableFeature","delay_id","_unstable_updateDelayedEvent","delayId","action","_this7","updateDelayedEvent","contentMap","_this8","getOpenIdToken","_this9","token","requestOpenIDConnectToken","access_token","expires_in","matrix_server_name","token_type","queueToDevice","_ref7","_this10","batch","Map","deviceId","payload","getOrCreate","set","encryptAndSendToDevices","userDeviceInfoArr","_this11","deviceInfo","checkTurnServers","_this12","getSyncState","syncState","state","oldState","Sync","_this13","transport","reply","_this14","servers","getTurnServers","onClientStopped","return","signal","addEventListener","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_asyncIterator","_step","next","done","server","value","urls","uris","username","credential","password","TurnServers","log","err","warn","removeEventListener"],"sources":["../src/embedded.ts"],"sourcesContent":["/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport {\n    WidgetApi,\n    WidgetApiToWidgetAction,\n    MatrixCapabilities,\n    IWidgetApiRequest,\n    IWidgetApiAcknowledgeResponseData,\n    ISendEventToWidgetActionRequest,\n    ISendToDeviceToWidgetActionRequest,\n    ISendEventFromWidgetResponseData,\n} from \"matrix-widget-api\";\n\nimport { MatrixEvent, IEvent, IContent, EventStatus } from \"./models/event.ts\";\nimport {\n    ISendEventResponse,\n    SendDelayedEventRequestOpts,\n    SendDelayedEventResponse,\n    UpdateDelayedEventAction,\n} from \"./@types/requests.ts\";\nimport { EventType, StateEvents } from \"./@types/event.ts\";\nimport { logger } from \"./logger.ts\";\nimport {\n    MatrixClient,\n    ClientEvent,\n    IMatrixClientCreateOpts,\n    IStartClientOpts,\n    SendToDeviceContentMap,\n    IOpenIDToken,\n    UNSTABLE_MSC4140_DELAYED_EVENTS,\n} from \"./client.ts\";\nimport { SyncApi, SyncState } from \"./sync.ts\";\nimport { SlidingSyncSdk } from \"./sliding-sync-sdk.ts\";\nimport { User } from \"./models/user.ts\";\nimport { Room } from \"./models/room.ts\";\nimport { ToDeviceBatch, ToDevicePayload } from \"./models/ToDeviceMessage.ts\";\nimport { DeviceInfo } from \"./crypto/deviceinfo.ts\";\nimport { IOlmDevice } from \"./crypto/algorithms/megolm.ts\";\nimport { MapWithDefault, recursiveMapToObject } from \"./utils.ts\";\n\ninterface IStateEventRequest {\n    eventType: string;\n    stateKey?: string;\n}\n\nexport interface ICapabilities {\n    /**\n     * Event types that this client expects to send.\n     */\n    sendEvent?: string[];\n    /**\n     * Event types that this client expects to receive.\n     */\n    receiveEvent?: string[];\n\n    /**\n     * Message types that this client expects to send, or true for all message\n     * types.\n     */\n    sendMessage?: string[] | true;\n    /**\n     * Message types that this client expects to receive, or true for all\n     * message types.\n     */\n    receiveMessage?: string[] | true;\n\n    /**\n     * Types of state events that this client expects to send.\n     */\n    sendState?: IStateEventRequest[];\n    /**\n     * Types of state events that this client expects to receive.\n     */\n    receiveState?: IStateEventRequest[];\n\n    /**\n     * To-device event types that this client expects to send.\n     */\n    sendToDevice?: string[];\n    /**\n     * To-device event types that this client expects to receive.\n     */\n    receiveToDevice?: string[];\n\n    /**\n     * Whether this client needs access to TURN servers.\n     * @defaultValue false\n     */\n    turnServers?: boolean;\n\n    /**\n     * Whether this client needs to be able to send delayed events.\n     * @experimental Part of MSC4140 & MSC4157\n     * @defaultValue false\n     */\n    sendDelayedEvents?: boolean;\n\n    /**\n     * Whether this client needs to be able to update delayed events.\n     * @experimental Part of MSC4140 & MSC4157\n     * @defaultValue false\n     */\n    updateDelayedEvents?: boolean;\n}\n\n/**\n * A MatrixClient that routes its requests through the widget API instead of the\n * real CS API.\n * @experimental This class is considered unstable!\n */\nexport class RoomWidgetClient extends MatrixClient {\n    private room?: Room;\n    private readonly widgetApiReady: Promise<void>;\n    private lifecycle?: AbortController;\n    private syncState: SyncState | null = null;\n\n    /**\n     *\n     * @param widgetApi - The widget api to use for communication.\n     * @param capabilities - The capabilities the widget client will request.\n     * @param roomId - The room id the widget is associated with.\n     * @param opts - The configuration options for this client.\n     * @param sendContentLoaded - Whether to send a content loaded widget action immediately after initial setup.\n     *   Set to `false` if the widget uses `waitForIFrameLoad=true` (in this case the client does not expect a content loaded action at all),\n     *   or if the the widget wants to send the `ContentLoaded` action at a later point in time after the initial setup.\n     */\n    public constructor(\n        private readonly widgetApi: WidgetApi,\n        private readonly capabilities: ICapabilities,\n        private readonly roomId: string,\n        opts: IMatrixClientCreateOpts,\n        sendContentLoaded: boolean,\n    ) {\n        super(opts);\n\n        this.widgetApiReady = new Promise<void>((resolve) => this.widgetApi.once(\"ready\", resolve));\n\n        // Request capabilities for the functionality this client needs to support\n        if (\n            capabilities.sendEvent?.length ||\n            capabilities.receiveEvent?.length ||\n            capabilities.sendMessage === true ||\n            (Array.isArray(capabilities.sendMessage) && capabilities.sendMessage.length) ||\n            capabilities.receiveMessage === true ||\n            (Array.isArray(capabilities.receiveMessage) && capabilities.receiveMessage.length) ||\n            capabilities.sendState?.length ||\n            capabilities.receiveState?.length\n        ) {\n            widgetApi.requestCapabilityForRoomTimeline(roomId);\n        }\n        capabilities.sendEvent?.forEach((eventType) => widgetApi.requestCapabilityToSendEvent(eventType));\n        capabilities.receiveEvent?.forEach((eventType) => widgetApi.requestCapabilityToReceiveEvent(eventType));\n        if (capabilities.sendMessage === true) {\n            widgetApi.requestCapabilityToSendMessage();\n        } else if (Array.isArray(capabilities.sendMessage)) {\n            capabilities.sendMessage.forEach((msgType) => widgetApi.requestCapabilityToSendMessage(msgType));\n        }\n        if (capabilities.receiveMessage === true) {\n            widgetApi.requestCapabilityToReceiveMessage();\n        } else if (Array.isArray(capabilities.receiveMessage)) {\n            capabilities.receiveMessage.forEach((msgType) => widgetApi.requestCapabilityToReceiveMessage(msgType));\n        }\n        capabilities.sendState?.forEach(({ eventType, stateKey }) =>\n            widgetApi.requestCapabilityToSendState(eventType, stateKey),\n        );\n        capabilities.receiveState?.forEach(({ eventType, stateKey }) =>\n            widgetApi.requestCapabilityToReceiveState(eventType, stateKey),\n        );\n        capabilities.sendToDevice?.forEach((eventType) => widgetApi.requestCapabilityToSendToDevice(eventType));\n        capabilities.receiveToDevice?.forEach((eventType) => widgetApi.requestCapabilityToReceiveToDevice(eventType));\n        if (\n            capabilities.sendDelayedEvents &&\n            (capabilities.sendEvent?.length ||\n                capabilities.sendMessage === true ||\n                (Array.isArray(capabilities.sendMessage) && capabilities.sendMessage.length) ||\n                capabilities.sendState?.length)\n        ) {\n            widgetApi.requestCapability(MatrixCapabilities.MSC4157SendDelayedEvent);\n        }\n        if (capabilities.updateDelayedEvents) {\n            widgetApi.requestCapability(MatrixCapabilities.MSC4157UpdateDelayedEvent);\n        }\n        if (capabilities.turnServers) {\n            widgetApi.requestCapability(MatrixCapabilities.MSC3846TurnServers);\n        }\n\n        widgetApi.on(`action:${WidgetApiToWidgetAction.SendEvent}`, this.onEvent);\n        widgetApi.on(`action:${WidgetApiToWidgetAction.SendToDevice}`, this.onToDevice);\n\n        // Open communication with the host\n        widgetApi.start();\n        // Send a content loaded event now we've started the widget API\n        // Note that element-web currently does not use waitForIFrameLoad=false and so\n        // does *not* (yes, that is the right way around) wait for this event. Let's\n        // start sending this, then once this has rolled out, we can change element-web to\n        // use waitForIFrameLoad=false and have a widget API that's less racy.\n        if (sendContentLoaded) widgetApi.sendContentLoaded();\n    }\n\n    public async startClient(opts: IStartClientOpts = {}): Promise<void> {\n        this.lifecycle = new AbortController();\n\n        // Create our own user object artificially (instead of waiting for sync)\n        // so it's always available, even if the user is not in any rooms etc.\n        const userId = this.getUserId();\n        if (userId) {\n            this.store.storeUser(new User(userId));\n        }\n\n        // Even though we have no access token and cannot sync, the sync class\n        // still has some valuable helper methods that we make use of, so we\n        // instantiate it anyways\n        if (opts.slidingSync) {\n            this.syncApi = new SlidingSyncSdk(opts.slidingSync, this, opts, this.buildSyncApiOptions());\n        } else {\n            this.syncApi = new SyncApi(this, opts, this.buildSyncApiOptions());\n        }\n\n        this.room = this.syncApi.createRoom(this.roomId);\n        this.store.storeRoom(this.room);\n\n        await this.widgetApiReady;\n\n        // Backfill the requested events\n        // We only get the most recent event for every type + state key combo,\n        // so it doesn't really matter what order we inject them in\n        await Promise.all(\n            this.capabilities.receiveState?.map(async ({ eventType, stateKey }) => {\n                const rawEvents = await this.widgetApi.readStateEvents(eventType, undefined, stateKey, [this.roomId]);\n                const events = rawEvents.map((rawEvent) => new MatrixEvent(rawEvent as Partial<IEvent>));\n\n                await this.syncApi!.injectRoomEvents(this.room!, [], events);\n                events.forEach((event) => {\n                    this.emit(ClientEvent.Event, event);\n                    logger.info(`Backfilled event ${event.getId()} ${event.getType()} ${event.getStateKey()}`);\n                });\n            }) ?? [],\n        );\n\n        if (opts.clientWellKnownPollPeriod !== undefined) {\n            this.clientWellKnownIntervalID = setInterval(() => {\n                this.fetchClientWellKnown();\n            }, 1000 * opts.clientWellKnownPollPeriod);\n            this.fetchClientWellKnown();\n        }\n\n        this.setSyncState(SyncState.Syncing);\n        logger.info(\"Finished backfilling events\");\n\n        this.matrixRTC.start();\n\n        // Watch for TURN servers, if requested\n        if (this.capabilities.turnServers) this.watchTurnServers();\n    }\n\n    public stopClient(): void {\n        this.widgetApi.off(`action:${WidgetApiToWidgetAction.SendEvent}`, this.onEvent);\n        this.widgetApi.off(`action:${WidgetApiToWidgetAction.SendToDevice}`, this.onToDevice);\n\n        super.stopClient();\n        this.lifecycle!.abort(); // Signal to other async tasks that the client has stopped\n    }\n\n    public async joinRoom(roomIdOrAlias: string): Promise<Room> {\n        if (roomIdOrAlias === this.roomId) return this.room!;\n        throw new Error(`Unknown room: ${roomIdOrAlias}`);\n    }\n\n    protected async encryptAndSendEvent(room: Room, event: MatrixEvent): Promise<ISendEventResponse>;\n    protected async encryptAndSendEvent(\n        room: Room,\n        event: MatrixEvent,\n        delayOpts: SendDelayedEventRequestOpts,\n    ): Promise<SendDelayedEventResponse>;\n    protected async encryptAndSendEvent(\n        room: Room,\n        event: MatrixEvent,\n        delayOpts?: SendDelayedEventRequestOpts,\n    ): Promise<ISendEventResponse | SendDelayedEventResponse> {\n        if (delayOpts) {\n            // TODO: updatePendingEvent for delayed events?\n            const response = await this.widgetApi.sendRoomEvent(\n                event.getType(),\n                event.getContent(),\n                room.roomId,\n                \"delay\" in delayOpts ? delayOpts.delay : undefined,\n                \"parent_delay_id\" in delayOpts ? delayOpts.parent_delay_id : undefined,\n            );\n            return this.validateSendDelayedEventResponse(response);\n        }\n\n        let response: ISendEventFromWidgetResponseData;\n        try {\n            response = await this.widgetApi.sendRoomEvent(event.getType(), event.getContent(), room.roomId);\n        } catch (e) {\n            this.updatePendingEventStatus(room, event, EventStatus.NOT_SENT);\n            throw e;\n        }\n\n        // This also checks for an event id on the response\n        room.updatePendingEvent(event, EventStatus.SENT, response.event_id);\n        return { event_id: response.event_id! };\n    }\n\n    public async sendStateEvent(\n        roomId: string,\n        eventType: string,\n        content: any,\n        stateKey = \"\",\n    ): Promise<ISendEventResponse> {\n        const response = await this.widgetApi.sendStateEvent(eventType, stateKey, content, roomId);\n        if (response.event_id === undefined) {\n            throw new Error(\"'event_id' absent from response to an event request\");\n        }\n        return { event_id: response.event_id };\n    }\n\n    /**\n     * @experimental This currently relies on an unstable MSC (MSC4140).\n     */\n    // eslint-disable-next-line\n    public async _unstable_sendDelayedStateEvent<K extends keyof StateEvents>(\n        roomId: string,\n        delayOpts: SendDelayedEventRequestOpts,\n        eventType: K,\n        content: StateEvents[K],\n        stateKey = \"\",\n    ): Promise<SendDelayedEventResponse> {\n        if (!(await this.doesServerSupportUnstableFeature(UNSTABLE_MSC4140_DELAYED_EVENTS))) {\n            throw Error(\"Server does not support the delayed events API\");\n        }\n\n        const response = await this.widgetApi.sendStateEvent(\n            eventType,\n            stateKey,\n            content,\n            roomId,\n            \"delay\" in delayOpts ? delayOpts.delay : undefined,\n            \"parent_delay_id\" in delayOpts ? delayOpts.parent_delay_id : undefined,\n        );\n        return this.validateSendDelayedEventResponse(response);\n    }\n\n    private validateSendDelayedEventResponse(response: ISendEventFromWidgetResponseData): SendDelayedEventResponse {\n        if (response.delay_id === undefined) {\n            throw new Error(\"'delay_id' absent from response to a delayed event request\");\n        }\n        return { delay_id: response.delay_id };\n    }\n\n    /**\n     * @experimental This currently relies on an unstable MSC (MSC4140).\n     */\n    // eslint-disable-next-line\n    public async _unstable_updateDelayedEvent(delayId: string, action: UpdateDelayedEventAction): Promise<{}> {\n        if (!(await this.doesServerSupportUnstableFeature(UNSTABLE_MSC4140_DELAYED_EVENTS))) {\n            throw Error(\"Server does not support the delayed events API\");\n        }\n\n        return await this.widgetApi.updateDelayedEvent(delayId, action);\n    }\n\n    public async sendToDevice(eventType: string, contentMap: SendToDeviceContentMap): Promise<{}> {\n        await this.widgetApi.sendToDevice(eventType, false, recursiveMapToObject(contentMap));\n        return {};\n    }\n\n    public async getOpenIdToken(): Promise<IOpenIDToken> {\n        const token = await this.widgetApi.requestOpenIDConnectToken();\n        // the IOpenIDCredentials from the widget-api and IOpenIDToken form the matrix-js-sdk are compatible.\n        // we still recreate the token to make this transparent and catch'able by the linter in case the types change in the future.\n        return <IOpenIDToken>{\n            access_token: token.access_token,\n            expires_in: token.expires_in,\n            matrix_server_name: token.matrix_server_name,\n            token_type: token.token_type,\n        };\n    }\n\n    public async queueToDevice({ eventType, batch }: ToDeviceBatch): Promise<void> {\n        // map: user Id → device Id → payload\n        const contentMap: MapWithDefault<string, Map<string, ToDevicePayload>> = new MapWithDefault(() => new Map());\n        for (const { userId, deviceId, payload } of batch) {\n            contentMap.getOrCreate(userId).set(deviceId, payload);\n        }\n\n        await this.widgetApi.sendToDevice(eventType, false, recursiveMapToObject(contentMap));\n    }\n\n    public async encryptAndSendToDevices(userDeviceInfoArr: IOlmDevice<DeviceInfo>[], payload: object): Promise<void> {\n        // map: user Id → device Id → payload\n        const contentMap: MapWithDefault<string, Map<string, object>> = new MapWithDefault(() => new Map());\n        for (const {\n            userId,\n            deviceInfo: { deviceId },\n        } of userDeviceInfoArr) {\n            contentMap.getOrCreate(userId).set(deviceId, payload);\n        }\n\n        await this.widgetApi.sendToDevice((payload as { type: string }).type, true, recursiveMapToObject(contentMap));\n    }\n\n    // Overridden since we get TURN servers automatically over the widget API,\n    // and this method would otherwise complain about missing an access token\n    public async checkTurnServers(): Promise<boolean> {\n        return this.turnServers.length > 0;\n    }\n\n    // Overridden since we 'sync' manually without the sync API\n    public getSyncState(): SyncState | null {\n        return this.syncState;\n    }\n\n    private setSyncState(state: SyncState): void {\n        const oldState = this.syncState;\n        this.syncState = state;\n        this.emit(ClientEvent.Sync, state, oldState);\n    }\n\n    private async ack(ev: CustomEvent<IWidgetApiRequest>): Promise<void> {\n        await this.widgetApi.transport.reply<IWidgetApiAcknowledgeResponseData>(ev.detail, {});\n    }\n\n    private onEvent = async (ev: CustomEvent<ISendEventToWidgetActionRequest>): Promise<void> => {\n        ev.preventDefault();\n\n        // Verify the room ID matches, since it's possible for the client to\n        // send us events from other rooms if this widget is always on screen\n        if (ev.detail.data.room_id === this.roomId) {\n            const event = new MatrixEvent(ev.detail.data as Partial<IEvent>);\n            await this.syncApi!.injectRoomEvents(this.room!, [], [event]);\n            this.emit(ClientEvent.Event, event);\n            this.setSyncState(SyncState.Syncing);\n            logger.info(`Received event ${event.getId()} ${event.getType()} ${event.getStateKey()}`);\n        } else {\n            const { event_id: eventId, room_id: roomId } = ev.detail.data;\n            logger.info(`Received event ${eventId} for a different room ${roomId}; discarding`);\n        }\n\n        await this.ack(ev);\n    };\n\n    private onToDevice = async (ev: CustomEvent<ISendToDeviceToWidgetActionRequest>): Promise<void> => {\n        ev.preventDefault();\n\n        const event = new MatrixEvent({\n            type: ev.detail.data.type,\n            sender: ev.detail.data.sender,\n            content: ev.detail.data.content as IContent,\n        });\n        // Mark the event as encrypted if it was, using fake contents and keys since those are unknown to us\n        if (ev.detail.data.encrypted) event.makeEncrypted(EventType.RoomMessageEncrypted, {}, \"\", \"\");\n\n        this.emit(ClientEvent.ToDeviceEvent, event);\n        this.setSyncState(SyncState.Syncing);\n        await this.ack(ev);\n    };\n\n    private async watchTurnServers(): Promise<void> {\n        const servers = this.widgetApi.getTurnServers();\n        const onClientStopped = (): void => {\n            servers.return(undefined);\n        };\n        this.lifecycle!.signal.addEventListener(\"abort\", onClientStopped);\n\n        try {\n            for await (const server of servers) {\n                this.turnServers = [\n                    {\n                        urls: server.uris,\n                        username: server.username,\n                        credential: server.password,\n                    },\n                ];\n                this.emit(ClientEvent.TurnServers, this.turnServers);\n                logger.log(`Received TURN server: ${server.uris}`);\n            }\n        } catch (e) {\n            logger.warn(\"Error watching TURN servers\", e);\n        } finally {\n            this.lifecycle!.signal.removeEventListener(\"abort\", onClientStopped);\n        }\n    }\n}\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAEIA,uBAAuB,EACvBC,kBAAkB,QAMf,mBAAmB;AAE1B,SAASC,WAAW,EAAoBC,WAAW,QAAQ,mBAAmB;AAO9E,SAASC,SAAS,QAAqB,mBAAmB;AAC1D,SAASC,MAAM,QAAQ,aAAa;AACpC,SACIC,YAAY,EACZC,WAAW,EAKXC,+BAA+B,QAC5B,aAAa;AACpB,SAASC,OAAO,EAAEC,SAAS,QAAQ,WAAW;AAC9C,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,IAAI,QAAQ,kBAAkB;AAKvC,SAASC,cAAc,EAAEC,oBAAoB,QAAQ,YAAY;AAmEjE;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,SAAST,YAAY,CAAC;EAM/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACWU,WAAWA,CACGC,SAAoB,EACpBC,YAA2B,EAC3BC,MAAc,EAC/BC,IAA6B,EAC7BC,iBAA0B,EAC5B;IAAA,IAAAC,KAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;IACE,KAAK,CAACd,IAAI,CAAC;IAAAE,KAAA,GAAAa,IAAA;IAAA,KANMlB,SAAoB,GAApBA,SAAoB;IAAA,KACpBC,YAA2B,GAA3BA,YAA2B;IAAA,KAC3BC,MAAc,GAAdA,MAAc;IAAAiB,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA,oBAfG,IAAI;IAAAA,eAAA;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAqTxB,WAAOC,EAAgD,EAAoB;QACzFA,EAAE,CAACC,cAAc,CAAC,CAAC;;QAEnB;QACA;QACA,IAAID,EAAE,CAACE,MAAM,CAACC,IAAI,CAACC,OAAO,KAAKrB,KAAI,CAACH,MAAM,EAAE;UACxC,IAAMyB,MAAK,GAAG,IAAI1C,WAAW,CAACqC,EAAE,CAACE,MAAM,CAACC,IAAuB,CAAC;UAChE,MAAMpB,KAAI,CAACuB,OAAO,CAAEC,gBAAgB,CAACxB,KAAI,CAACyB,IAAI,EAAG,EAAE,EAAE,CAACH,MAAK,CAAC,CAAC;UAC7DtB,KAAI,CAAC0B,IAAI,CAACzC,WAAW,CAAC0C,KAAK,EAAEL,MAAK,CAAC;UACnCtB,KAAI,CAAC4B,YAAY,CAACxC,SAAS,CAACyC,OAAO,CAAC;UACpC9C,MAAM,CAAC+C,IAAI,mBAAAC,MAAA,CAAmBT,MAAK,CAACU,KAAK,CAAC,CAAC,OAAAD,MAAA,CAAIT,MAAK,CAACW,OAAO,CAAC,CAAC,OAAAF,MAAA,CAAIT,MAAK,CAACY,WAAW,CAAC,CAAC,CAAE,CAAC;QAC5F,CAAC,MAAM;UACH,IAAM;YAAEC,QAAQ,EAAEC,OAAO;YAAEf,OAAO,EAAExB;UAAO,CAAC,GAAGoB,EAAE,CAACE,MAAM,CAACC,IAAI;UAC7DrC,MAAM,CAAC+C,IAAI,mBAAAC,MAAA,CAAmBK,OAAO,4BAAAL,MAAA,CAAyBlC,OAAM,iBAAc,CAAC;QACvF;QAEA,MAAMG,KAAI,CAACqC,GAAG,CAACpB,EAAE,CAAC;MACtB,CAAC;MAAA,iBAAAqB,EAAA;QAAA,OAAAvB,IAAA,CAAAwB,KAAA,OAAAC,SAAA;MAAA;IAAA;IAAA1B,eAAA;MAAA,IAAA2B,KAAA,GAAAzB,iBAAA,CAEoB,WAAOC,EAAmD,EAAoB;QAC/FA,EAAE,CAACC,cAAc,CAAC,CAAC;QAEnB,IAAMI,KAAK,GAAG,IAAI1C,WAAW,CAAC;UAC1B8D,IAAI,EAAEzB,EAAE,CAACE,MAAM,CAACC,IAAI,CAACsB,IAAI;UACzBC,MAAM,EAAE1B,EAAE,CAACE,MAAM,CAACC,IAAI,CAACuB,MAAM;UAC7BC,OAAO,EAAE3B,EAAE,CAACE,MAAM,CAACC,IAAI,CAACwB;QAC5B,CAAC,CAAC;QACF;QACA,IAAI3B,EAAE,CAACE,MAAM,CAACC,IAAI,CAACyB,SAAS,EAAEvB,KAAK,CAACwB,aAAa,CAAChE,SAAS,CAACiE,oBAAoB,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;QAE7F/C,KAAI,CAAC0B,IAAI,CAACzC,WAAW,CAAC+D,aAAa,EAAE1B,KAAK,CAAC;QAC3CtB,KAAI,CAAC4B,YAAY,CAACxC,SAAS,CAACyC,OAAO,CAAC;QACpC,MAAM7B,KAAI,CAACqC,GAAG,CAACpB,EAAE,CAAC;MACtB,CAAC;MAAA,iBAAAgC,GAAA;QAAA,OAAAR,KAAA,CAAAF,KAAA,OAAAC,SAAA;MAAA;IAAA;IAjUG,IAAI,CAACU,cAAc,GAAG,IAAIC,OAAO,CAAQC,OAAO,IAAK,IAAI,CAACzD,SAAS,CAAC0D,IAAI,CAAC,OAAO,EAAED,OAAO,CAAC,CAAC;;IAE3F;IACA,IACI,CAAAnD,qBAAA,GAAAL,YAAY,CAAC0D,SAAS,cAAArD,qBAAA,eAAtBA,qBAAA,CAAwBsD,MAAM,KAAArD,qBAAA,GAC9BN,YAAY,CAAC4D,YAAY,cAAAtD,qBAAA,eAAzBA,qBAAA,CAA2BqD,MAAM,IACjC3D,YAAY,CAAC6D,WAAW,KAAK,IAAI,IAChCC,KAAK,CAACC,OAAO,CAAC/D,YAAY,CAAC6D,WAAW,CAAC,IAAI7D,YAAY,CAAC6D,WAAW,CAACF,MAAO,IAC5E3D,YAAY,CAACgE,cAAc,KAAK,IAAI,IACnCF,KAAK,CAACC,OAAO,CAAC/D,YAAY,CAACgE,cAAc,CAAC,IAAIhE,YAAY,CAACgE,cAAc,CAACL,MAAO,KAAApD,qBAAA,GAClFP,YAAY,CAACiE,SAAS,cAAA1D,qBAAA,eAAtBA,qBAAA,CAAwBoD,MAAM,KAAAnD,sBAAA,GAC9BR,YAAY,CAACkE,YAAY,cAAA1D,sBAAA,eAAzBA,sBAAA,CAA2BmD,MAAM,EACnC;MACE5D,SAAS,CAACoE,gCAAgC,CAAClE,MAAM,CAAC;IACtD;IACA,CAAAQ,sBAAA,GAAAT,YAAY,CAAC0D,SAAS,cAAAjD,sBAAA,eAAtBA,sBAAA,CAAwB2D,OAAO,CAAEC,SAAS,IAAKtE,SAAS,CAACuE,4BAA4B,CAACD,SAAS,CAAC,CAAC;IACjG,CAAA3D,sBAAA,GAAAV,YAAY,CAAC4D,YAAY,cAAAlD,sBAAA,eAAzBA,sBAAA,CAA2B0D,OAAO,CAAEC,SAAS,IAAKtE,SAAS,CAACwE,+BAA+B,CAACF,SAAS,CAAC,CAAC;IACvG,IAAIrE,YAAY,CAAC6D,WAAW,KAAK,IAAI,EAAE;MACnC9D,SAAS,CAACyE,8BAA8B,CAAC,CAAC;IAC9C,CAAC,MAAM,IAAIV,KAAK,CAACC,OAAO,CAAC/D,YAAY,CAAC6D,WAAW,CAAC,EAAE;MAChD7D,YAAY,CAAC6D,WAAW,CAACO,OAAO,CAAEK,OAAO,IAAK1E,SAAS,CAACyE,8BAA8B,CAACC,OAAO,CAAC,CAAC;IACpG;IACA,IAAIzE,YAAY,CAACgE,cAAc,KAAK,IAAI,EAAE;MACtCjE,SAAS,CAAC2E,iCAAiC,CAAC,CAAC;IACjD,CAAC,MAAM,IAAIZ,KAAK,CAACC,OAAO,CAAC/D,YAAY,CAACgE,cAAc,CAAC,EAAE;MACnDhE,YAAY,CAACgE,cAAc,CAACI,OAAO,CAAEK,OAAO,IAAK1E,SAAS,CAAC2E,iCAAiC,CAACD,OAAO,CAAC,CAAC;IAC1G;IACA,CAAA9D,sBAAA,GAAAX,YAAY,CAACiE,SAAS,cAAAtD,sBAAA,eAAtBA,sBAAA,CAAwByD,OAAO,CAACO,KAAA;MAAA,IAAC;QAAEN,SAAS;QAAEO;MAAS,CAAC,GAAAD,KAAA;MAAA,OACpD5E,SAAS,CAAC8E,4BAA4B,CAACR,SAAS,EAAEO,QAAQ,CAAC;IAAA,CAC/D,CAAC;IACD,CAAAhE,sBAAA,GAAAZ,YAAY,CAACkE,YAAY,cAAAtD,sBAAA,eAAzBA,sBAAA,CAA2BwD,OAAO,CAACU,KAAA;MAAA,IAAC;QAAET,SAAS;QAAEO;MAAS,CAAC,GAAAE,KAAA;MAAA,OACvD/E,SAAS,CAACgF,+BAA+B,CAACV,SAAS,EAAEO,QAAQ,CAAC;IAAA,CAClE,CAAC;IACD,CAAA/D,qBAAA,GAAAb,YAAY,CAACgF,YAAY,cAAAnE,qBAAA,eAAzBA,qBAAA,CAA2BuD,OAAO,CAAEC,SAAS,IAAKtE,SAAS,CAACkF,+BAA+B,CAACZ,SAAS,CAAC,CAAC;IACvG,CAAAvD,sBAAA,GAAAd,YAAY,CAACkF,eAAe,cAAApE,sBAAA,eAA5BA,sBAAA,CAA8BsD,OAAO,CAAEC,SAAS,IAAKtE,SAAS,CAACoF,kCAAkC,CAACd,SAAS,CAAC,CAAC;IAC7G,IACIrE,YAAY,CAACoF,iBAAiB,KAC7B,CAAArE,sBAAA,GAAAf,YAAY,CAAC0D,SAAS,cAAA3C,sBAAA,eAAtBA,sBAAA,CAAwB4C,MAAM,IAC3B3D,YAAY,CAAC6D,WAAW,KAAK,IAAI,IAChCC,KAAK,CAACC,OAAO,CAAC/D,YAAY,CAAC6D,WAAW,CAAC,IAAI7D,YAAY,CAAC6D,WAAW,CAACF,MAAO,KAAA3C,sBAAA,GAC5EhB,YAAY,CAACiE,SAAS,cAAAjD,sBAAA,eAAtBA,sBAAA,CAAwB2C,MAAM,CAAC,EACrC;MACE5D,SAAS,CAACsF,iBAAiB,CAACtG,kBAAkB,CAACuG,uBAAuB,CAAC;IAC3E;IACA,IAAItF,YAAY,CAACuF,mBAAmB,EAAE;MAClCxF,SAAS,CAACsF,iBAAiB,CAACtG,kBAAkB,CAACyG,yBAAyB,CAAC;IAC7E;IACA,IAAIxF,YAAY,CAACyF,WAAW,EAAE;MAC1B1F,SAAS,CAACsF,iBAAiB,CAACtG,kBAAkB,CAAC2G,kBAAkB,CAAC;IACtE;IAEA3F,SAAS,CAAC4F,EAAE,WAAAxD,MAAA,CAAWrD,uBAAuB,CAAC8G,SAAS,GAAI,IAAI,CAACC,OAAO,CAAC;IACzE9F,SAAS,CAAC4F,EAAE,WAAAxD,MAAA,CAAWrD,uBAAuB,CAACgH,YAAY,GAAI,IAAI,CAACC,UAAU,CAAC;;IAE/E;IACAhG,SAAS,CAACiG,KAAK,CAAC,CAAC;IACjB;IACA;IACA;IACA;IACA;IACA,IAAI7F,iBAAiB,EAAEJ,SAAS,CAACI,iBAAiB,CAAC,CAAC;EACxD;EAEa8F,WAAWA,CAAA,EAA6C;IAAA,IAAAC,UAAA,GAAAtD,SAAA;MAAAuD,MAAA;IAAA,OAAA/E,iBAAA;MAAA,IAAAgF,qBAAA,EAAAC,sBAAA;MAAA,IAA5CnG,IAAsB,GAAAgG,UAAA,CAAAvC,MAAA,QAAAuC,UAAA,QAAAI,SAAA,GAAAJ,UAAA,MAAG,CAAC,CAAC;MAChDC,MAAI,CAACI,SAAS,GAAG,IAAIC,eAAe,CAAC,CAAC;;MAEtC;MACA;MACA,IAAMC,MAAM,GAAGN,MAAI,CAACO,SAAS,CAAC,CAAC;MAC/B,IAAID,MAAM,EAAE;QACRN,MAAI,CAACQ,KAAK,CAACC,SAAS,CAAC,IAAIlH,IAAI,CAAC+G,MAAM,CAAC,CAAC;MAC1C;;MAEA;MACA;MACA;MACA,IAAIvG,IAAI,CAAC2G,WAAW,EAAE;QAClBV,MAAI,CAACxE,OAAO,GAAG,IAAIlC,cAAc,CAACS,IAAI,CAAC2G,WAAW,EAAEV,MAAI,EAAEjG,IAAI,EAAEiG,MAAI,CAACW,mBAAmB,CAAC,CAAC,CAAC;MAC/F,CAAC,MAAM;QACHX,MAAI,CAACxE,OAAO,GAAG,IAAIpC,OAAO,CAAC4G,MAAI,EAAEjG,IAAI,EAAEiG,MAAI,CAACW,mBAAmB,CAAC,CAAC,CAAC;MACtE;MAEAX,MAAI,CAACtE,IAAI,GAAGsE,MAAI,CAACxE,OAAO,CAACoF,UAAU,CAACZ,MAAI,CAAClG,MAAM,CAAC;MAChDkG,MAAI,CAACQ,KAAK,CAACK,SAAS,CAACb,MAAI,CAACtE,IAAI,CAAC;MAE/B,MAAMsE,MAAI,CAAC7C,cAAc;;MAEzB;MACA;MACA;MACA,MAAMC,OAAO,CAAC0D,GAAG,EAAAb,qBAAA,IAAAC,sBAAA,GACbF,MAAI,CAACnG,YAAY,CAACkE,YAAY,cAAAmC,sBAAA,uBAA9BA,sBAAA,CAAgCa,GAAG;QAAA,IAAAC,KAAA,GAAA/F,iBAAA,CAAC,WAAAgG,KAAA,EAAmC;UAAA,IAA5B;YAAE/C,SAAS;YAAEO;UAAS,CAAC,GAAAwC,KAAA;UAC9D,IAAMC,SAAS,SAASlB,MAAI,CAACpG,SAAS,CAACuH,eAAe,CAACjD,SAAS,EAAEiC,SAAS,EAAE1B,QAAQ,EAAE,CAACuB,MAAI,CAAClG,MAAM,CAAC,CAAC;UACrG,IAAMsH,MAAM,GAAGF,SAAS,CAACH,GAAG,CAAEM,QAAQ,IAAK,IAAIxI,WAAW,CAACwI,QAA2B,CAAC,CAAC;UAExF,MAAMrB,MAAI,CAACxE,OAAO,CAAEC,gBAAgB,CAACuE,MAAI,CAACtE,IAAI,EAAG,EAAE,EAAE0F,MAAM,CAAC;UAC5DA,MAAM,CAACnD,OAAO,CAAE1C,KAAK,IAAK;YACtByE,MAAI,CAACrE,IAAI,CAACzC,WAAW,CAAC0C,KAAK,EAAEL,KAAK,CAAC;YACnCvC,MAAM,CAAC+C,IAAI,qBAAAC,MAAA,CAAqBT,KAAK,CAACU,KAAK,CAAC,CAAC,OAAAD,MAAA,CAAIT,KAAK,CAACW,OAAO,CAAC,CAAC,OAAAF,MAAA,CAAIT,KAAK,CAACY,WAAW,CAAC,CAAC,CAAE,CAAC;UAC9F,CAAC,CAAC;QACN,CAAC;QAAA,iBAAAmF,GAAA;UAAA,OAAAN,KAAA,CAAAxE,KAAA,OAAAC,SAAA;QAAA;MAAA,IAAC,cAAAwD,qBAAA,cAAAA,qBAAA,GAAI,EACV,CAAC;MAED,IAAIlG,IAAI,CAACwH,yBAAyB,KAAKpB,SAAS,EAAE;QAC9CH,MAAI,CAACwB,yBAAyB,GAAGC,WAAW,CAAC,MAAM;UAC/CzB,MAAI,CAAC0B,oBAAoB,CAAC,CAAC;QAC/B,CAAC,EAAE,IAAI,GAAG3H,IAAI,CAACwH,yBAAyB,CAAC;QACzCvB,MAAI,CAAC0B,oBAAoB,CAAC,CAAC;MAC/B;MAEA1B,MAAI,CAACnE,YAAY,CAACxC,SAAS,CAACyC,OAAO,CAAC;MACpC9C,MAAM,CAAC+C,IAAI,CAAC,6BAA6B,CAAC;MAE1CiE,MAAI,CAAC2B,SAAS,CAAC9B,KAAK,CAAC,CAAC;;MAEtB;MACA,IAAIG,MAAI,CAACnG,YAAY,CAACyF,WAAW,EAAEU,MAAI,CAAC4B,gBAAgB,CAAC,CAAC;IAAC;EAC/D;EAEOC,UAAUA,CAAA,EAAS;IACtB,IAAI,CAACjI,SAAS,CAACkI,GAAG,WAAA9F,MAAA,CAAWrD,uBAAuB,CAAC8G,SAAS,GAAI,IAAI,CAACC,OAAO,CAAC;IAC/E,IAAI,CAAC9F,SAAS,CAACkI,GAAG,WAAA9F,MAAA,CAAWrD,uBAAuB,CAACgH,YAAY,GAAI,IAAI,CAACC,UAAU,CAAC;IAErF,KAAK,CAACiC,UAAU,CAAC,CAAC;IAClB,IAAI,CAACzB,SAAS,CAAE2B,KAAK,CAAC,CAAC,CAAC,CAAC;EAC7B;EAEaC,QAAQA,CAACC,aAAqB,EAAiB;IAAA,IAAAC,MAAA;IAAA,OAAAjH,iBAAA;MACxD,IAAIgH,aAAa,KAAKC,MAAI,CAACpI,MAAM,EAAE,OAAOoI,MAAI,CAACxG,IAAI;MACnD,MAAM,IAAIyG,KAAK,kBAAAnG,MAAA,CAAkBiG,aAAa,CAAE,CAAC;IAAC;EACtD;EAQgBG,mBAAmBA,CAC/B1G,IAAU,EACVH,KAAkB,EAClB8G,SAAuC,EACe;IAAA,IAAAC,MAAA;IAAA,OAAArH,iBAAA;MACtD,IAAIoH,SAAS,EAAE;QACX;QACA,IAAME,SAAQ,SAASD,MAAI,CAAC1I,SAAS,CAAC4I,aAAa,CAC/CjH,KAAK,CAACW,OAAO,CAAC,CAAC,EACfX,KAAK,CAACkH,UAAU,CAAC,CAAC,EAClB/G,IAAI,CAAC5B,MAAM,EACX,OAAO,IAAIuI,SAAS,GAAGA,SAAS,CAACK,KAAK,GAAGvC,SAAS,EAClD,iBAAiB,IAAIkC,SAAS,GAAGA,SAAS,CAACM,eAAe,GAAGxC,SACjE,CAAC;QACD,OAAOmC,MAAI,CAACM,gCAAgC,CAACL,SAAQ,CAAC;MAC1D;MAEA,IAAIA,QAA0C;MAC9C,IAAI;QACAA,QAAQ,SAASD,MAAI,CAAC1I,SAAS,CAAC4I,aAAa,CAACjH,KAAK,CAACW,OAAO,CAAC,CAAC,EAAEX,KAAK,CAACkH,UAAU,CAAC,CAAC,EAAE/G,IAAI,CAAC5B,MAAM,CAAC;MACnG,CAAC,CAAC,OAAO+I,CAAC,EAAE;QACRP,MAAI,CAACQ,wBAAwB,CAACpH,IAAI,EAAEH,KAAK,EAAEzC,WAAW,CAACiK,QAAQ,CAAC;QAChE,MAAMF,CAAC;MACX;;MAEA;MACAnH,IAAI,CAACsH,kBAAkB,CAACzH,KAAK,EAAEzC,WAAW,CAACmK,IAAI,EAAEV,QAAQ,CAACnG,QAAQ,CAAC;MACnE,OAAO;QAAEA,QAAQ,EAAEmG,QAAQ,CAACnG;MAAU,CAAC;IAAC;EAC5C;EAEa8G,cAAcA,CACvBpJ,MAAc,EACdoE,SAAiB,EACjBrB,OAAY,EAEe;IAAA,IAAAsG,WAAA,GAAA1G,SAAA;MAAA2G,MAAA;IAAA,OAAAnI,iBAAA;MAAA,IAD3BwD,QAAQ,GAAA0E,WAAA,CAAA3F,MAAA,QAAA2F,WAAA,QAAAhD,SAAA,GAAAgD,WAAA,MAAG,EAAE;MAEb,IAAMZ,QAAQ,SAASa,MAAI,CAACxJ,SAAS,CAACsJ,cAAc,CAAChF,SAAS,EAAEO,QAAQ,EAAE5B,OAAO,EAAE/C,MAAM,CAAC;MAC1F,IAAIyI,QAAQ,CAACnG,QAAQ,KAAK+D,SAAS,EAAE;QACjC,MAAM,IAAIgC,KAAK,CAAC,qDAAqD,CAAC;MAC1E;MACA,OAAO;QAAE/F,QAAQ,EAAEmG,QAAQ,CAACnG;MAAS,CAAC;IAAC;EAC3C;;EAEA;AACJ;AACA;EACI;EACaiH,+BAA+BA,CACxCvJ,MAAc,EACduI,SAAsC,EACtCnE,SAAY,EACZrB,OAAuB,EAEU;IAAA,IAAAyG,WAAA,GAAA7G,SAAA;MAAA8G,MAAA;IAAA,OAAAtI,iBAAA;MAAA,IADjCwD,QAAQ,GAAA6E,WAAA,CAAA9F,MAAA,QAAA8F,WAAA,QAAAnD,SAAA,GAAAmD,WAAA,MAAG,EAAE;MAEb,IAAI,QAAQC,MAAI,CAACC,gCAAgC,CAACrK,+BAA+B,CAAC,CAAC,EAAE;QACjF,MAAMgJ,KAAK,CAAC,gDAAgD,CAAC;MACjE;MAEA,IAAMI,QAAQ,SAASgB,MAAI,CAAC3J,SAAS,CAACsJ,cAAc,CAChDhF,SAAS,EACTO,QAAQ,EACR5B,OAAO,EACP/C,MAAM,EACN,OAAO,IAAIuI,SAAS,GAAGA,SAAS,CAACK,KAAK,GAAGvC,SAAS,EAClD,iBAAiB,IAAIkC,SAAS,GAAGA,SAAS,CAACM,eAAe,GAAGxC,SACjE,CAAC;MACD,OAAOoD,MAAI,CAACX,gCAAgC,CAACL,QAAQ,CAAC;IAAC;EAC3D;EAEQK,gCAAgCA,CAACL,QAA0C,EAA4B;IAC3G,IAAIA,QAAQ,CAACkB,QAAQ,KAAKtD,SAAS,EAAE;MACjC,MAAM,IAAIgC,KAAK,CAAC,4DAA4D,CAAC;IACjF;IACA,OAAO;MAAEsB,QAAQ,EAAElB,QAAQ,CAACkB;IAAS,CAAC;EAC1C;;EAEA;AACJ;AACA;EACI;EACaC,4BAA4BA,CAACC,OAAe,EAAEC,MAAgC,EAAe;IAAA,IAAAC,MAAA;IAAA,OAAA5I,iBAAA;MACtG,IAAI,QAAQ4I,MAAI,CAACL,gCAAgC,CAACrK,+BAA+B,CAAC,CAAC,EAAE;QACjF,MAAMgJ,KAAK,CAAC,gDAAgD,CAAC;MACjE;MAEA,aAAa0B,MAAI,CAACjK,SAAS,CAACkK,kBAAkB,CAACH,OAAO,EAAEC,MAAM,CAAC;IAAC;EACpE;EAEa/E,YAAYA,CAACX,SAAiB,EAAE6F,UAAkC,EAAe;IAAA,IAAAC,MAAA;IAAA,OAAA/I,iBAAA;MAC1F,MAAM+I,MAAI,CAACpK,SAAS,CAACiF,YAAY,CAACX,SAAS,EAAE,KAAK,EAAEzE,oBAAoB,CAACsK,UAAU,CAAC,CAAC;MACrF,OAAO,CAAC,CAAC;IAAC;EACd;EAEaE,cAAcA,CAAA,EAA0B;IAAA,IAAAC,MAAA;IAAA,OAAAjJ,iBAAA;MACjD,IAAMkJ,KAAK,SAASD,MAAI,CAACtK,SAAS,CAACwK,yBAAyB,CAAC,CAAC;MAC9D;MACA;MACA,OAAqB;QACjBC,YAAY,EAAEF,KAAK,CAACE,YAAY;QAChCC,UAAU,EAAEH,KAAK,CAACG,UAAU;QAC5BC,kBAAkB,EAAEJ,KAAK,CAACI,kBAAkB;QAC5CC,UAAU,EAAEL,KAAK,CAACK;MACtB,CAAC;IAAC;EACN;EAEaC,aAAaA,CAAAC,KAAA,EAAqD;IAAA,IAAAC,OAAA;IAAA,OAAA1J,iBAAA;MAAA,IAApD;QAAEiD,SAAS;QAAE0G;MAAqB,CAAC,GAAAF,KAAA;MAC1D;MACA,IAAMX,UAAgE,GAAG,IAAIvK,cAAc,CAAC,MAAM,IAAIqL,GAAG,CAAC,CAAC,CAAC;MAC5G,KAAK,IAAM;QAAEvE,MAAM;QAAEwE,QAAQ;QAAEC;MAAQ,CAAC,IAAIH,KAAK,EAAE;QAC/Cb,UAAU,CAACiB,WAAW,CAAC1E,MAAM,CAAC,CAAC2E,GAAG,CAACH,QAAQ,EAAEC,OAAO,CAAC;MACzD;MAEA,MAAMJ,OAAI,CAAC/K,SAAS,CAACiF,YAAY,CAACX,SAAS,EAAE,KAAK,EAAEzE,oBAAoB,CAACsK,UAAU,CAAC,CAAC;IAAC;EAC1F;EAEamB,uBAAuBA,CAACC,iBAA2C,EAAEJ,OAAe,EAAiB;IAAA,IAAAK,OAAA;IAAA,OAAAnK,iBAAA;MAC9G;MACA,IAAM8I,UAAuD,GAAG,IAAIvK,cAAc,CAAC,MAAM,IAAIqL,GAAG,CAAC,CAAC,CAAC;MACnG,KAAK,IAAM;QACPvE,MAAM;QACN+E,UAAU,EAAE;UAAEP;QAAS;MAC3B,CAAC,IAAIK,iBAAiB,EAAE;QACpBpB,UAAU,CAACiB,WAAW,CAAC1E,MAAM,CAAC,CAAC2E,GAAG,CAACH,QAAQ,EAAEC,OAAO,CAAC;MACzD;MAEA,MAAMK,OAAI,CAACxL,SAAS,CAACiF,YAAY,CAAEkG,OAAO,CAAsBpI,IAAI,EAAE,IAAI,EAAElD,oBAAoB,CAACsK,UAAU,CAAC,CAAC;IAAC;EAClH;;EAEA;EACA;EACauB,gBAAgBA,CAAA,EAAqB;IAAA,IAAAC,OAAA;IAAA,OAAAtK,iBAAA;MAC9C,OAAOsK,OAAI,CAACjG,WAAW,CAAC9B,MAAM,GAAG,CAAC;IAAC;EACvC;;EAEA;EACOgI,YAAYA,CAAA,EAAqB;IACpC,OAAO,IAAI,CAACC,SAAS;EACzB;EAEQ5J,YAAYA,CAAC6J,KAAgB,EAAQ;IACzC,IAAMC,QAAQ,GAAG,IAAI,CAACF,SAAS;IAC/B,IAAI,CAACA,SAAS,GAAGC,KAAK;IACtB,IAAI,CAAC/J,IAAI,CAACzC,WAAW,CAAC0M,IAAI,EAAEF,KAAK,EAAEC,QAAQ,CAAC;EAChD;EAEcrJ,GAAGA,CAACpB,EAAkC,EAAiB;IAAA,IAAA2K,OAAA;IAAA,OAAA5K,iBAAA;MACjE,MAAM4K,OAAI,CAACjM,SAAS,CAACkM,SAAS,CAACC,KAAK,CAAoC7K,EAAE,CAACE,MAAM,EAAE,CAAC,CAAC,CAAC;IAAC;EAC3F;EAqCcwG,gBAAgBA,CAAA,EAAkB;IAAA,IAAAoE,OAAA;IAAA,OAAA/K,iBAAA;MAC5C,IAAMgL,OAAO,GAAGD,OAAI,CAACpM,SAAS,CAACsM,cAAc,CAAC,CAAC;MAC/C,IAAMC,eAAe,GAAGA,CAAA,KAAY;QAChCF,OAAO,CAACG,MAAM,CAACjG,SAAS,CAAC;MAC7B,CAAC;MACD6F,OAAI,CAAC5F,SAAS,CAAEiG,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEH,eAAe,CAAC;MAEjE,IAAI;QAAA,IAAAI,yBAAA;QAAA,IAAAC,iBAAA;QAAA,IAAAC,cAAA;QAAA;UACA,SAAAC,SAAA,GAAAC,cAAA,CAA2BV,OAAO,GAAAW,KAAA,EAAAL,yBAAA,KAAAK,KAAA,SAAAF,SAAA,CAAAG,IAAA,IAAAC,IAAA,EAAAP,yBAAA,UAAE;YAAA,IAAnBQ,MAAM,GAAAH,KAAA,CAAAI,KAAA;YAAA;cACnBhB,OAAI,CAAC1G,WAAW,GAAG,CACf;gBACI2H,IAAI,EAAEF,MAAM,CAACG,IAAI;gBACjBC,QAAQ,EAAEJ,MAAM,CAACI,QAAQ;gBACzBC,UAAU,EAAEL,MAAM,CAACM;cACvB,CAAC,CACJ;cACDrB,OAAI,CAACrK,IAAI,CAACzC,WAAW,CAACoO,WAAW,EAAEtB,OAAI,CAAC1G,WAAW,CAAC;cACpDtG,MAAM,CAACuO,GAAG,0BAAAvL,MAAA,CAA0B+K,MAAM,CAACG,IAAI,CAAE,CAAC;YAAC;UACvD;QAAC,SAAAM,GAAA;UAAAhB,iBAAA;UAAAC,cAAA,GAAAe,GAAA;QAAA;UAAA;YAAA,IAAAjB,yBAAA,IAAAG,SAAA,CAAAN,MAAA;cAAA,MAAAM,SAAA,CAAAN,MAAA;YAAA;UAAA;YAAA,IAAAI,iBAAA;cAAA,MAAAC,cAAA;YAAA;UAAA;QAAA;MACL,CAAC,CAAC,OAAO5D,CAAC,EAAE;QACR7J,MAAM,CAACyO,IAAI,CAAC,6BAA6B,EAAE5E,CAAC,CAAC;MACjD,CAAC,SAAS;QACNmD,OAAI,CAAC5F,SAAS,CAAEiG,MAAM,CAACqB,mBAAmB,CAAC,OAAO,EAAEvB,eAAe,CAAC;MACxE;IAAC;EACL;AACJ","ignoreList":[]}